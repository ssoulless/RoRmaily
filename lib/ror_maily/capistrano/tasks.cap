namespace :load do
  task :defaults do
    set :ror_maily_default_hooks, -> { true }

    set :ror_maily_env, -> { fetch(:rack_env, fetch(:rails_env, fetch(:stage))) }
    set :ror_maily_role, -> { :app }

    set :rbenv_map_bins, fetch(:rbenv_map_bins).to_a.concat(%w(ror_maily))
    set :rvm_map_bins, fetch(:rvm_map_bins).to_a.concat(%w(ror_maily))
  end
end

namespace :deploy do
  before :starting, :check_ror_maily_hooks do
    invoke 'ror_maily:add_default_hooks' if fetch(:ror_maily_default_hooks)
  end
  after :publishing, :restart_ror_maily do
    invoke 'ror_maily:restart' if fetch(:ror_maily_default_hooks)
  end
end

namespace :ror_maily do
  def stop_ror_maily
    execute :bundle, :exec, :ror_maily, "paperboy", "--stop"
  end

  def start_ror_maily
    execute :bundle, :exec, :ror_maily, "paperboy", "--start"
  end

  def restart_ror_maily
    execute :bundle, :exec, :ror_maily, "paperboy", "--restart"
  end

  task :add_default_hooks do
    after 'deploy:updated', 'ror_maily:stop'
    after 'deploy:reverted', 'ror_maily:stop'
    after 'deploy:published', 'ror_maily:start'
  end

  desc 'Stop ror_maily'
  task :stop do
    on roles fetch(:ror_maily_role) do
      within release_path do
        stop_ror_maily
      end
    end
  end

  desc 'Start ror_maily'
  task :start do
    on roles fetch(:ror_maily_role) do
      within release_path do
        start_ror_maily
      end
    end
  end

  desc 'Restart ror_maily'
  task :restart do
    on roles fetch(:ror_maily_role) do
      within release_path do
        restart_ror_maily
      end
    end
  end
end
